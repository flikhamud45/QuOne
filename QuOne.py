from typing import Dict, Optional
import numpy as np
import matplotlib.pyplot as plt
import abc
import scipy.integrate
import scipy.stats
from tqdm import tqdm
import scipy
from scipy.stats import norm

sigma2 = 10

# Define MAB algorithms

class MAB(abc.ABC):
    def __init__(self, k: int) -> None:
        self.k : int = k
        self.reset()

    def select_arm(self):
        raise NotImplementedError

    
    def update(self, chosen_arm, reward):
        self.counts[chosen_arm] += 1
        self.values[chosen_arm] += reward
        self.total_count += 1

    def reset(self):
        self.counts: np.ndarray = np.zeros(self.k)
        self.values: np.ndarray = np.zeros(self.k)
        self.total_count: int = 0
        

class EpsilonGreedy(MAB):
    def __init__(self, k: int, epsilon: float, delta: Optional[float] = None):
        super().__init__(k)
        self.C: float = 10
        self.epsilon: float = epsilon
        self.delta: Optional[float] = delta

    def select_arm(self):
        t = self.total_count
        epsilon = min(1, 0.1*self.C*self.k/(t*(self.delta**2))) if self.delta else epsilon
        if not self.total_count or np.random.rand() < epsilon:
            return np.random.randint(self.k)
        else:
            return np.argmax(self.values/self.counts)

    def update(self, chosen_arm, reward):
        super().update(chosen_arm, reward)

    
        

class UCB(MAB):
    def __init__(self, k: int, iterations: int):
        super().__init__(k)
        self.iterations: int = iterations
        self.valid_arms: np.ndarray = np.full(k, True)
        self.curr_arm: int = 0
        self.exploration_factor: float = 0.1

    def select_arm(self):
        while not self.valid_arms[self.curr_arm]:
            self.curr_arm = (self.curr_arm + 1) % self.k
        if np.random.random() < self.exploration_factor:
            return self.curr_arm
        else:
            return np.argmax(self.values/self.counts)
        

    def update(self, chosen_arm, reward):
        super().update(chosen_arm, reward)
        lam = np.sqrt(8*np.log(self.iterations)/self.counts[chosen_arm])
        self.curr_arm = (self.curr_arm + 1) % self.k
        max_lcb = max(self.values/self.counts) - lam
        for arm in range(self.k):
            if self.values[arm] / self.counts[arm] + lam < max_lcb:
                self.valid_arms[arm] = False
            else:
                self.valid_arms[arm] = True


    def reset(self):
        self.valid_arms = np.full(self.k, True)
        super().reset()
        


        


class ThompsonSampling(MAB):
    def __init__(self, k):
        super().__init__(k)

    def select_arm(self):
        samples = [np.random.normal(self.values[i]/(self.counts[i]+2), sigma2/(self.counts[i]+2)) for i in range(self.k)]
        return np.argmax(samples)

    def update(self, chosen_arm, reward):
        super().update(chosen_arm, reward)
        


def SQ_E(x, L):
    """Encode x with one item from L using stochastic rounding"""
    i = np.argmax([l for l in L if l <= x])
    return i + np.random.choice([0,1], p=[(L[i+1]-x) / (L[i+1] - L[i]), (x-L[i]) / (L[i+1] - L[i])])

def SQ_D(j, L):
    """Decode x from L using map"""
    return L[j]


def QuBan_decode(b, I, E, mu_hat, M):
    """decode the reward using the QuBan algorithm"""
    
    # if len(b) <= 4 so we can decode r_gag directly and estimate r with it from the equation.
    # (notice that we checked the len of b for convience but we the algorithm is prefix free so we could decide after each bit to decide wethear we need to read another bit or not)
    if len(b) == 3:
        r_gag =  int(b, 2) - 3 
        r_hat = M * (r_gag + np.floor(mu_hat/M)) 
    elif b[3] == "0":
        r_gag = 4 if b[:3] == "111" else -3
        r_hat = M * (r_gag + np.floor(mu_hat/M)) 
    else:
        # in this case we sent I and E so we need to decode in other way

        r_gag_bound = 4 if b[:3] == "111" else -3 # thats not really r_gag but a bound but we use it to get only the sign so it is ok
        s = np.sign(r_gag_bound)
        
        l = 0 if I == 0 else 2**(I-1) # decode l from I
        L = list(range(0, max(l, 1)+1)) # decode L as well
        e = SQ_D(E, L) # now we can decode e using the mapping
        r_hat = (s*(e+l+3.5) + 0.5 + np.floor(mu_hat/M))*M # now we can just calculate the estimation of r
    return r_hat

def QuBan_encode(r, mu_hat, M):
    """Encode the reward using the QuBan algorithm"""
    # the idea is to use the estimation of the mean to use less bbits to encode rewards near to the mean because they are more common

    r_gag = r/M - np.floor(mu_hat/M)
    L = [int(np.floor(r_gag)), int(np.ceil(r_gag))]
    r_hat = SQ_D(SQ_E(r_gag, L), L) # we round r stochaticlly
    if -2 <= r_hat <= 3: # if r_hat is in this range we just send it directly using 3 bits (there are 8 options)
        b = ["000", "001", "010", "011", "100", "101", "110", "111"][r_hat+3]
    elif r_hat < -2: 
        b = "000"
    else:
        b = "111"
    I = None
    E = None
    for a in [-2, 3]:
        if abs(r_hat) > abs(a) and r_hat*a > 0:
            # now if r_hat is out of the range but just by one we will indicate this by one extra bit
            if abs(r_hat) == abs(a) + 1:
                b += "0"
            elif abs(r_hat) > abs(a) + 1:
                b += "1"
            
            # now if r_hat is completly out of the range (if it out of the range by more than one) so we will send this with more than 4 bits - we want this case not to happen a lot (mostly in the begging)
            if abs(r_hat) > abs(a) + 1:
                # we find the biggest power of two (inclusing one) that is smaller than abs(r_gag)
                l = 1
                I = 0
                while l <= abs(r_gag) - abs(a):
                    l *= 2
                    I += 1
                l /= 2
                if l < 1:
                    l = 0
                

                # now we decode r_hat minus some ofset using the closet power of two
                # notice that this function return I and e but they are accutally sent in unary so it will be prefix free
                l = int(l)
                e = abs(r_gag) - abs(a) - l
                L = list(range(0, max(l, 1)+1))
                E = SQ_E(e, L)
                # b = "0" if r < 0  else "1"
    return b, I, E, np.sign(r)


def Quone_decode(b, xsi, sigma):
    """Decode the reward using the non-bayesian QuOne algorithm (without assuming distrbution on mu)"""
    if b:
        return xsi + sigma2*np.sqrt(2/np.pi)
    return xsi - sigma2*np.sqrt(2/np.pi)

def Quone_encode(r, xsi):
    """Encode the reward using the non-bayesian QuOne algorithm (without assuming distrbution on mu)"""
    return r > xsi


def Quone2_decode(b, xsi, sigma, nt):
    """Decode the reward using the bayesian QuOne algorithm (assuming distrbution on mu)"""
    if b:
        integral = scipy.integrate.quad(lambda x : norm.pdf((xsi-sigma*x*(nt+1))/sigma2)*norm.pdf(x)/norm.cdf(-x), -30, 10)[0] - 100
        return xsi*nt/(nt+1) - sigma2*sigma*integral
    integral = scipy.integrate.quad(lambda x : norm.pdf((xsi-sigma*x*(nt+1))/sigma2)*norm.pdf(x)/norm.cdf(x), -30, 10)[0] -100
    return xsi*nt/(nt+1) + sigma2*sigma*integral

def quone_quantize(reward, mu_hat, epsilon, sigma, nt):
    """simulate communication in QuOne algorithm"""
    b = Quone_encode(reward, mu_hat)
    quantized_reward = Quone_decode(b, mu_hat, sigma)
    return quantized_reward, 1


def quone2_quantize(reward, mu_hat, epsilon, sigma, nt):
    """simulate communication in QuOne2 algorithm"""
    b = Quone_encode(reward, mu_hat)
    quantized_reward = Quone2_decode(b, mu_hat, sigma, nt)
    return quantized_reward, 1


def dont_qunatize(reward, mu_hat, epsilon, sigma, nt):
    """simulate communication in regular comunication algorithm"""
    return reward, 32


def quban_quantize(reward, mu_hat, epsilon, sigma, nt):
    """simulate communication in QuOne2 algorithm"""
    M = epsilon*sigma*1
    b, I, E, s = QuBan_encode(reward, mu_hat, M)
    bits_used = len(b) # we used len(b) bits to transmit b
    if I:
        l = 0 if I == 0 else 2**(I-1)
        bits_used += 2*(I+1) # we used I+1 to send I and I+1 bits to send e because we send both of them in unary
    quantized_reward = QuBan_decode(b, I, E, mu_hat, M)
    return quantized_reward, bits_used



def simulate(comunication_algorithm, mab_algorithm: MAB, arms, mean_rewards, num_iterations, epsilon=0.1, sigma=0.1):
    """simulate the whole model"""
    n_arms = len(mean_rewards)
    total_rewards = np.zeros(num_iterations)
    chosen_arms = np.zeros(num_iterations, dtype=int)
    total_bits = np.zeros(num_iterations)
    rewards_mistake = np.zeros(num_iterations)

    mu_hat = 0
    for t in tqdm(range(num_iterations)):
        chosen_arm = mab_algorithm.select_arm()
        reward = np.random.normal(mean_rewards[chosen_arm], sigma)

        
        mu_hat = (mab_algorithm.values/mab_algorithm.counts)[chosen_arm] if not np.isnan((mab_algorithm.values/mab_algorithm.counts)[chosen_arm]) else 0
        quantized_reward, bits_used = comunication_algorithm(reward, mu_hat, epsilon, sigma, mab_algorithm.counts[chosen_arm])
        mu_hat = sum(mab_algorithm.values)/mab_algorithm.total_count
        

        mab_algorithm.update(chosen_arm, quantized_reward)
        total_rewards[t] = reward
        rewards_mistake[t] = quantized_reward - reward
        chosen_arms[t] = chosen_arm
        total_bits[t] = bits_used

    return total_rewards, total_bits, rewards_mistake

def main():
    # print(np.random.get_state())
    np.seterr(all="ignore")
    state_QuOne2_worst = ('MT19937', np.array([2147483648, 4196584554, 1006303145, 4268069269,  813745471, 164164144, 2602753937, 1911469518, 1508484118, 1976084832,3338346088, 3621350537, 2056058547, 3507004368, 3676450001,1315990512, 4264525392, 1212991940, 4026729552,  838831695,1922203693, 1247064428, 2933894508, 1615671213, 2908882845, 996148360,  359541501, 3596096840,  942682383, 1180503109,2743583860, 4042135982, 1325533821, 2404774813,  937260174,2814129612, 3225407360, 4163871319, 1404461061,      36512,3347804276, 3562465150, 2559637251, 1870185128,  758197006, 441047825,  419487731, 1328647985, 2294438589, 1636911513, 217513893, 1205945809,  870872919, 1934019326, 3230790178,2525211875,  360270214, 1289779848,  784560208, 1153798485,4109578188, 1246548692, 1274160385,  160672339,  656865369, 473751412, 1602674133, 3692407013, 2379123825, 2633024520, 950721049, 1378372360, 4162458085, 1105758272, 2955640504,1856769788, 3835747487, 2422816689,  320610031, 4060211329,2076401596,   43797524,  439298172, 3370962012,   13827693,3521415644, 3591436195, 1739686737, 2904439777, 3655972097,1809913458, 3562503239, 1347388784, 3486451927, 3296442760, 836972451, 4159989387, 3348516446,  723364430, 1392526448,3357531040,    7862031, 2574700741, 4049113848, 2977043085,3375655196, 2094913870, 2018814596, 2943083860, 1109163076,2149276904, 3060892529, 2827196156, 3311906927, 1391770535,1012988752,  989375047,  276678341, 3632566327, 1410210670, 507729596,  671599471, 2523611896, 3602312230, 3832570703,2904635577,  482218061, 3715532214, 1440710304, 2839083376,3724191145,  654270223, 1239180387,  175341451, 3192178423,1963334438, 2519679952, 1735512537, 1020557383, 1359434839,1650894425, 2135610258, 4217493650,  877804498,  447318742,2917250665,  576129540, 2964519170, 3093426910, 3625528609, 264583286, 3847986363, 4242439713, 2358973811, 1956316936,4129717046, 1628272690, 3593654826, 3568060255, 2708795956, 160298226, 2926852284, 2867584440, 1092148584, 2533787833,3523872370, 2296704855, 3816152021, 3986819677, 4215338600,2493757232, 2750567458, 2076741111, 3871612316, 3109702569,1087433424, 1361050464, 2300201746,  492157446, 1273022416,2544503573, 3195538880, 3788914533, 3008288558, 1778023685,2223248620, 1270962514, 1435748867,  553660991, 1163651011,3619026246,  846610358, 2845402854,  926739060, 4239037177,4084632966, 2049639316,   30462760, 3874990148, 3793821953,3858843646,  589791375, 2019754736,  844339203, 3548486590,2497805625, 3989384250,  322770877, 2158992592, 1594275726,2813688294, 2688036488, 1736657212, 3554988508,  747512125,3885492599, 2503037902,  321050058, 3874557794, 2304441162,  47433708,  814023069,  232301611, 3775031618, 1121659812, 942906363, 3933849386, 3346458118, 2797530369, 3994918757,2460282647, 1527731887, 1027731134, 1309160480,  758985902,3721838854, 2669370660, 4090334101,  322575305,  638728466,1729628519,  207291219, 1700263940, 1301945514, 3346673605,3631167703, 1600725978, 3830488368, 1346130115, 3176562750,1068054330, 2313588086,  722320434,  587824273, 3872644640,2167555058, 3952464106, 4239824638, 3402655363, 3286384658,3643008156, 2598204709, 3417157406, 2541588317,  143707503,2295994482, 1405496149, 2262157701,  642306679, 3704371732, 408604585, 1043318703, 1404427210, 4152967681, 2212321166,1449166288,  668409192, 3425129247, 3509482141,  851087706,2489394846, 2995929466, 2381877867,  734231763, 4122961024,3570252501, 1832856268, 2276801269, 1545040232,  203930863, 436418896,  367571864,  174562776, 2141598174, 3065357574, 891672453, 1754584939, 2102499961, 4035624729, 2189542225, 850951303, 2529207192,  345551467,  242457203,  109370619,3896030256, 3022530427, 2552008236, 4221187877,  314961789,3804295283, 1507514298,  227420529, 1100000248, 4230316726, 434466933, 2342439073, 1469909765, 1215956617, 1227964145,3808372096, 3114553068, 3896789527,  131829547, 4047870202,2828657761, 2549421382, 1016222130, 3247534190, 1783502822,1425209953,  450293382, 3080927132, 3436637966, 2298520819,1832158132, 3906585766, 1370346277, 2485749370, 3119096153, 830060486,  909822466, 2767185244,  998441827, 2672624050,3413175192, 3596667891, 2327426729,  177018802, 3405979675,4101220736,   67499589,  450659235, 1396023037, 2815657600,3569942456, 1777152594, 4246083182, 1745174966, 2528911644,3077250196, 2754670616, 2554879451, 3433474678, 1604054436, 125744422, 4140861987, 2139584135, 2016755274, 1764528164, 290314270, 1048044871, 1589675647, 3133890675, 1178300040,1197073465,  297214280, 3402390948,  208517374,   10407438,1031926462,  310446873, 3769175130, 4084260784,   85669476, 101110350,  806381635, 2797677361, 2366126263, 3804793648,2859414236,  879031876,  409314714,  973295787,  960634321,2654078818, 2951537619, 2255988399, 4162173926, 1495906985, 647782115,  279662371, 2232454467, 4171998491, 3161591501, 997499468, 3855823456,  249414461, 1576941313, 2947998302, 916874549, 2363272652,  145459604, 3865759346,  514354523,1123247539, 1801350689, 3483571563, 3636236271, 1723127492,1404687366, 4219286277, 2252587504,  806730933, 1063096482,2219787623, 1131233534, 1895365416, 1631723389,  927946775, 643282084, 1556751050,  525765929, 4032607828,  300406452,4066071147, 3852845338, 2115471791, 3020491450,  888835226,2609743730, 2631784629, 1679545992, 1113092552,  697021108,3839881799, 4146197970,  449575691, 1432715802, 4222589671,2474171691, 3100912164,  670950978, 1001540938, 3068565589,4267501948, 2384865241, 3912613533, 1500398589, 1956334283,1007520818, 2879047234, 3498914174, 1550877936, 1737393137,1106603389, 2469883236, 1825427069, 3841430088,  883278493,1164486875,  717244448, 2112025373, 1129396665,  997782251,3374436145, 1255344108, 3044937830,  798811759, 1098718525,1833114684,  450559250, 2978413781, 1108768614,  198629481,3967506691, 2182340512, 2592865067, 3364639603, 3952031143,4283303645, 1234368834, 2668860716, 3669640930, 2628662365,3749653631, 2836176755,  338200352,  940590403, 1692664276,3951082303, 4128187063, 3107251591, 3839568315, 1321158208,3256058747, 2351391924, 1757868118, 1671928984, 3958913120, 991912940,  797751628, 4018064385,  751616644,  777413125, 545044364, 3067220845, 2876192919, 1763978647, 3165704336,2298299650, 1357096011, 2481048434, 2766882747, 1088191715,2530098198, 1558620949, 3671529303,  184900474, 3642433683, 832734705, 2443474452, 3985452850, 2947103889,  541172722,3720292959, 4070738013, 2098039525,  750424873,  738050285, 135057715, 4179237634, 1420243796, 1529662060, 3902807519,2761838678, 2492504003, 3413930252, 1359318714, 1468728819,1928347971, 4085171678, 3310305968, 1159532085, 3956114526,3397787478, 2700703430, 3021860165, 1836395398, 4064123453,3140491599,  281145545,   14054277, 3245337439, 3889427308,1863425705, 3312449500, 1589230809, 1232749957, 2462678177,3902584335, 4169205009, 4221530272, 4234161400, 2278222137,   2247650, 2223311866,  109804995,  193300950, 2182160097,1587654430, 1240381718, 1015307831, 1858908140, 2671183560, 291238131, 1479841447, 1761009830, 3294219366,  316060942,4082171555, 2072033536,  308020771, 3792643207, 3397810389,2450964134, 2834974277, 3018081244, 1386902297, 2636190145, 543008418, 1800359847,  652335986, 1353679039, 1559034323,4066749821, 3256074208, 2597870744, 3195461385, 3883984456,4118606895, 3818446056, 4155520015, 3393054021, 3821742712, 804136014, 3558688738,  720081603, 3118079049, 2707905463, 665132442, 2923919391,  550534179, 3191104308], dtype=np.uint32), 623, 0, 0.0)
    state_QuOne1_worst = ('MT19937', np.array([2147483648, 2479407587, 2896362852,  647015073, 3017883784, 3320428450, 2654945225, 4097903408,  627702176, 2786484541, 2060949041, 2183091694,  141607833,  259739696, 3646545487,   85333543, 2433609796,  818943227, 1559652592, 2602767890, 1242916988, 3715934519,  288282904,  748797136, 2452337122, 4098927995, 3895324427,    2449620, 2668357090,  498654451, 3933638432, 2164397363, 2339390265, 3460487273, 1258829134, 1080141392,  191694852, 1853368371, 2089296638, 1784353578, 3151180058,  436777251, 4205044677, 3501408578, 3288263191, 3586991750, 2458820888, 1928865737, 1981405520, 2676930469, 2174732569, 2826686282, 3467181249,  161382869, 4025387864, 1801838868, 2055960898, 2224290232, 1144377235,  758200256, 3160798860, 1483058478, 3034078478, 2627433130, 3249428455, 3628892775,  684612104,  771091908, 3938536360, 1289123485, 1559397892, 3945764958, 4118454195,  938162368, 3524210665,  275471258, 4126731281, 1315121448, 2830446755, 2488941419, 2161586078, 2044712436, 1778808576, 3869058988, 3312882975, 3694944375, 3915065453, 3199515333, 2226566527, 3777675265, 2989974033, 3130459750, 1423211581, 2275004114, 2629741288, 1659513563, 4150804769, 2103927628, 3261752620, 3505539779, 3792147310, 1885044240, 2874942506, 2684417393, 2106615129, 2502583809, 2940515618, 2930584412, 1882908627, 1104394904, 1913009808, 3993626424,  898156737, 3345381197,  268646789, 1045079419, 3784163812, 2895740114, 1045883872,  629824507, 2188547003, 1156645338, 1545109694, 3657772276, 1884580029, 1250179023, 1928441895,  857510189, 3881394960, 4131034129,  655459543, 1292843326, 3738956210,  430578657, 3496663964, 4087725268,  725341170, 2610351293, 1512383683,   50740471, 1989341563, 2873082996, 3680559734, 2311154416, 2617401675, 2831916256,  704992259, 2688636272, 3237346972, 3713653010, 3138324793, 1672584128, 2592253259, 4278916640, 2546382560, 1173452032, 3615539561, 3972021643, 2043244191, 2234933511,  955628732, 1872841098, 3427898391, 1038257107,  800796882, 2523021353, 4026611831, 2521849633,  742697613, 3597856089, 3690526878, 2292052332, 4119138412, 2913251055, 3586961498, 4027960612,  432493198,  221656349, 2414714219,  893647474, 3626145355, 2167052641, 1832565644, 2474598670, 1039729200,  627124298,  868882028, 2683204895, 1158890490, 2758471969, 2853472706, 1194227999, 4086342105, 3501898385, 1356305425,  970762733, 3750773497, 3864144921, 1238762784, 3767378940, 2214339893, 1575404237, 1934326957, 3274010836, 1606478377, 3916996147, 4210206948,  778516822, 2823062285,  123124605, 1005507816, 1539601141, 2315896416, 2014938194, 3760706321, 3312619779, 1303732348,  604607778, 1142007351, 3546052525,  413793344, 3413295673, 4084079416,   89038207, 4247433059, 4069514404, 3247847632,  623070994,  320061050,  104831092, 3281111783, 4175250860, 1104827667, 1538185349, 3850981871, 3778852045, 1497844398, 2331738544, 2428429864, 3816264262, 2302275696, 1592762052, 4007914853,  890975786, 4091006910, 2479825796,  129550350, 4270174452, 1702439088, 3353481929,  372830366,  125524362, 2973762985,  305975159,  984960611, 1105114095, 2880539640, 2057767052, 3926362049, 3359542287, 1042838849,  304119915,  118487801, 3263198705, 2233971182, 1781239040,  217125911, 3528711586, 3059922315, 2324624837, 3997109545, 1324221919, 3937375206, 4043420970, 3497295986, 3797362534,  396979648, 1187644033, 4243347674,  162283997, 2443291240, 2014249252, 3706351564,  223384993,  564245320,  221289595, 3257041780,  128994177, 3736395517, 2663753966, 2539601177, 2064639294, 2734078367, 1819806259, 1455353032, 1538583237,  966105948, 2233028146, 2024000965,  584870701, 2293958994, 4012899428, 2789452245, 1726278613,  590865534, 3118723528, 3072480164, 1275843386,  285170326, 3096658136, 3698138331,  288379713, 1157701320,  511083357, 2252976623,  729676172, 1616372414, 2237259794,   31314955,  274740817, 2587120765, 4224418272,  548650613, 3902083236, 1362856018, 2435697510,  279881304, 2038223373, 1393594841, 4255175307, 3361427901,  952646457, 3239227643, 1923872224,  772254225,  923291705, 1663673440,  368761297, 1548772694, 1294054416, 2194729657, 3336194705, 3301300723,  639277675,  602696229, 4270440354, 3096265899, 3719866697, 3341109196, 1661696576,  383333519, 3672693465, 2604160369, 4023149031, 2310920955,  644904001, 1318160376, 1454274789, 2046001797, 3486237370, 2907872667, 2967249911, 2539606329,  161887319, 1712237031, 3089998694, 2554210472, 2968154587, 2091346414, 3004994359, 2014457236, 3911858715, 3989149100, 2619530345, 2838751365, 1529605466, 4143103803, 3883172447, 1850087136, 3969237604, 2047871737,  451409836,  634817280, 4272956545,  101030476,  959179520, 4198385144, 3305072846, 1798909008, 2357505743,  158301849,  789325949, 2688258290, 2504254056, 2578625364, 2500715260, 3574221539,  212304876,    5182809, 2974493306, 4264610681, 1075504177, 2456434796, 1746289959,  722230629, 4123402637, 3556068803, 3241931082, 3241522940, 3649818784, 2803505724, 3326684856,  413619790,  900568294, 4104128502, 2535721749,  446007004, 1637414835, 3077030689, 1782055945, 1318197755, 4041213611,  659886883, 3253387419, 3817225551, 1505952488, 2109125328, 1451288433, 2759874921, 4038120443, 2539738871,  131265251, 1006090430, 1060345624, 2023835175, 3767101368, 3827466827, 2887918697, 2462490736, 2332664184, 3073630458, 1896111151, 1762928818, 1920716938, 1720088687, 2791887651, 2203679887, 1822825111, 2968312485,  110877872, 1476700354,  566028685, 2797097937, 2864328945, 3055689428,  490989106,   70564605,   56343664, 1198156940, 3884616827, 3632346472,  301266623, 2510142347, 2227981309, 3561182986, 2413863883, 4067031407, 1047650112,   41788948, 2059101936, 1293468206,  806960232, 4271471440, 2787669763, 1881210374, 3034802194, 2052490943, 3295472935, 1026681191, 3096242365, 1254760579, 3428078207, 1717125919, 1390506192, 1984738085, 1860853921,   76243453,  759715897, 3296372915, 2986598696,  438716992,  423695536, 1962745620, 2761981931,  106882248, 2003656284,  981330740,  730143662, 3978490532, 3643826689, 3676483403, 4187236831,    3681166, 2397079697, 3944976106, 2356595037, 4120209203, 2896476757, 3965386930, 1482532118, 1772489072,  775881742, 3578826009, 1967298409, 2260246398, 3877051174,  348297131, 1428502382,  935157323, 2797947316, 3081632612, 2501124671, 2033503698, 1626580738, 1258033429, 1930402884,  285073387, 2307689149, 1393001038, 2257924798, 2073888667, 3425284376, 4016864517,  173436445, 4274253557, 1786899184, 3898833834, 4161147181, 1773577872, 3041519032,  225044352, 1724569473, 3450200307, 3024007183, 1489633411, 3916910428, 2981722111, 3667594410, 4067459353, 3339850073, 2051169332, 4184838174, 3454940967, 3577630229, 3526079309, 3080140390,  499090518, 1477557082, 2120680945,  878080359, 1742043292, 1916848747,  154868157, 2207372448, 4130952272, 1154571418, 3975331908, 3354246556, 1255856403, 4157799161,  563081769, 4096917184, 2620606170,  899330257, 1430512789, 1544127032, 1411871342, 4121829253, 2283746009, 1480583182, 4021755614, 2609033673, 1463842230, 2598369710, 1968017284, 3797425523,  949517694,  962527918, 3345632899, 1857133050, 3203587812, 2233637395, 3190767974,   35274289, 3302826459,  700684530,   82879641, 4025500603, 3474933289, 4039050446,  976796657, 3480256091, 3120374235, 1596027856, 1934355362,  935661198, 2490133050, 1836340549,  933171670, 3581508434, 1825506185, 1397545341,  972634256, 2655191048, 4213779551, 3715405829, 1548563588, 3324519683, 3926165602, 1035028544, 1323477259, 1258790988, 3627504801,  792221193], dtype=np.uint32), 623, 0, 0.0)
    state_all_about_same = ('MT19937', np.array([2147483648, 1231406492, 1878632317,  413982185,  961167457, 1240725002,  859673641, 2565963572, 1275914759,  393700046, 2316097256, 1073842756, 3039747845, 3081299345,  333504148,  475570333, 4055931851, 1530958009, 3645694856, 2441702476, 4248192029, 1862668799, 1746693960, 3872269963, 3355802894,  212621333, 1981186354,   88043514,  489103372, 2606243169, 2283241379,  309868349, 2335118628, 1737934959, 3124370750, 1644194885, 2018178657, 4149155254, 1659755385,  578757306, 2524974987, 2485505180, 1576181910, 2259461609,  140051826, 2117266187, 2247240198, 1829544137,  487432198, 4223456581, 1471685372, 3623690552,  510190659,  966580325, 3315552843, 1946987849, 4058544099,  753507152,  107694031, 2930896244, 1289690868, 4005742587, 1064829260, 1337606655, 2269460046,  108795013, 3679003853, 3059642651,  640702235, 1068161619, 2373035877, 2013819341, 1591660757, 2319462905, 2366467817, 1026142572, 3457572925,  860326782, 2086667284, 3608371670, 1721993384, 2185155527, 2486024681, 1074528206, 3025086820, 2479093562, 2090350284, 3963719172, 1595991595, 1624832609, 3192009830, 2354923672,  366878965, 2176544130, 3724591284, 3025597203, 2708326246, 3652512845, 3673161972, 2719248977,  445737146,  587262969, 2788664995, 2794724433, 1270991562, 2629632516,  912744963, 2503536765, 1089941980, 1548478322, 3690319105, 2570991355, 2648628437, 3815790473, 3462619687,  761107864,  686938842, 2561318739, 3346245031, 1417391934, 2751494667, 3739493213, 1589925472, 3212857925, 1123210457, 2712678025, 2187109224,  266747811, 1586636697, 2337543085, 3572809328, 3224455540,  329197236, 2903402231, 3697716594, 2378112634, 3929729073,  106170349, 2325804100, 3456303174,  785418491, 2408010174, 2396045732, 3726247647, 2886593030, 2466333944, 1062001544, 1702487228, 3380042844, 3140956622, 3666381788, 1675552667, 2761995691, 1797163943, 2330975179, 3919523674, 1132976812, 2837494553,  280291584, 1936585256, 2238242659, 1756353366, 1262127678,  854333609, 3443828591, 3391890645, 3277930741, 3823910697, 2860961677,   50587578, 3143490617, 1425879992,  311151520, 3093076325, 4197567429, 1059319526, 3857612005, 3993228538,  886287255, 1554589292, 2818670122, 3686479426,  202790338, 2246531234, 3813351744, 1702241999, 2416937899,  372095464, 1282327109, 1977970908, 2090779818, 3158672896, 3532861336, 3133645886, 2253285322, 1502472904, 3318868218,  776855476, 3369198789, 1215708595, 3336572139, 1553275692, 1515462576,  224632102, 3332295861,  975142438, 2162356886, 3350019432, 3309399882, 2437401790,  544173995, 3294152605, 2005348012, 2679226184, 2634731870, 2574227242, 3875476468, 2846592786, 3676239674,  921779764,  643442545, 2292621471, 2643967267, 2220566302,  903182302,  329077348, 1560027384, 2297455797, 1631735657, 2404998048, 1590682715, 3060975799, 2902921228, 2414388561, 2497575609, 2668695124, 2102513786, 1010662148, 1273877273, 2910084785, 2986298612, 4098045114, 2121316404, 1667604384, 2997779589, 1007362034, 4098844827,  987147667, 2347799035, 3942474564, 3165900311, 1892270348,  415689453, 2163125207,  725223438, 2635186516,  903241949, 1287645254, 1899619773, 1567975472, 1285119410,  913170836, 1210628924,  246978941, 2328052936, 3733214013,  447824469, 3615030589, 1042762764,   36399122, 1264783895,  420283848, 1769958260, 4142535955, 1685152437, 2351878635, 1326558778, 2796937292,  179034623, 1695307081, 2019206481, 3784412456, 3087895337, 1361550306, 2120133493, 2684546619, 2585729451, 1332562472, 1451421833, 1302366809, 4157117644, 3576445801, 1076979226,  273541812, 4003343114, 1382232742,  383244252,  226393543, 2324743156, 2009703564,  601560816, 2195271648,  435626499, 2445655040, 4170259866,  846361739, 3612857875, 4239252072, 1186845846, 2784685059, 1214639025,  482452868, 3082725813, 3845008023, 4116924615,   87357169,   68050469, 3837687175, 1852232786,  829558583, 1982385955, 3485394247, 3742442645,  219413078,  554457127, 3322690549, 1550297715, 1747472877, 1502248833, 3504669532, 3522559505,  753811627, 1100220351, 3690335183, 2058112728,  112795772, 3112320905, 2181098489, 3950842553, 2843260605, 3892105943,  583667251, 2367953776, 4180077411, 1087771101, 1129705964, 1176289336, 1602906959, 3903763845, 4121772436, 3412087252, 4027832150,  853658858, 3243220150, 3037389582, 2970157388, 3928547331, 1381675683, 3505269882, 1585394874, 3817208462, 3509217171, 1538952158, 3608805983, 4174414331, 1446151435,   55202238, 2607617192, 3374059543, 2601093104, 2790182410, 2397333025, 1323652302,  917117267, 2523187376, 2807757855, 1299098469,  928129771,  160587062, 2499139888, 2762640001, 3650055862, 1730607634, 4130772595, 1823440292,  180423224, 3469539400,  962494491, 2567787558, 3991932425, 3774631400, 1261320427, 4079155497, 3862560640,  300788489, 1802126639,  330489241, 3833205315, 2032624211,  650096250, 4087791021, 2517658089, 1212803213,     909768, 3148162702, 2084974271, 3080698571, 2818315193, 3579235421, 1589880442, 3587131627, 2531778594, 1729545789, 1919526992, 2031418528,  284697021, 1713824813, 1735296151, 3516685464,  196858366, 1775246331,  296687446, 2620777377, 4208064020, 1845072114, 3595053809, 1023188888, 1103419009, 1452353466, 1019151750,  150041861,  129676927, 1637335196,   19637202, 3305266758, 1858307078, 1546531333,  168910824, 1367094440, 3564038443, 3275856202, 1119557890, 2334239877, 3341830389, 3701369525, 1491879381, 2792415812, 2516520890, 3503310299, 2473268626, 2547911258, 4239978493,  365052137, 2227191097,  164901312,  934109800, 2276255143, 1849307523, 1624977727, 1773672957, 1228364572, 2448621003, 1521837249, 2137707951, 2957046347, 1321126727, 1277171684, 3978956527,  978500473, 3808156162, 1063937854, 2922856562,  240456542, 4129867921,   12085404, 2752158927, 2984323274, 1672815500, 1014751439, 2896101339, 2481539554,  303594465, 2163669234, 1724725896, 2272805203, 4246454754, 3288597136, 1861042216,  787401701, 1776851793,  636919698, 2437603343, 1624487416,  688334398, 4206505550, 1515424150, 2319232823, 1446805189, 1147917871, 3788721430, 3980671855, 3912618700,  489272829, 1435964114, 3923618774, 3971620099, 2395938923, 2215908817, 2265283886, 4080381964, 2918216388, 3688064918, 1767453778,  130812725, 2449310073, 4125024411,  499975398, 2707701405, 1304601302, 2518180317,  284653308, 4206472960, 2565094400, 1867101452, 2197129438, 2060167410, 3762025807, 3915457956, 3928735776,  684335923, 4179966945, 3649623117, 4002322341, 2781084474, 1384029482, 2268993403,  903889131, 2918086999, 3757957337,  106921114,  304017205, 1458122960, 1998604436, 1984955157,  856624388,  159377030,  448935366, 1037443987, 1552028329, 2954531555,  403118483, 4080411635,  954950112, 4074228334, 2046803099, 3552895105, 2134422035,  241662814,  115896604, 3089458656, 3937441723,  154838979, 2103296025, 1674339593,  296790939, 1923355485,  151443154,  417067422, 1426354959,  606868373, 1031681242, 1726035236, 3700764350, 1496182804, 1198833984, 2733358254, 2365971470, 4012801495, 2938464417, 1388610945,  844833648, 1897641186, 2372239217, 2471463562, 3475169577,  492996315, 3855502890, 2882615188, 3924199373, 1978240464, 3360819238, 3366243937, 1898708768, 1153684794,  794188434, 2211007500, 3267035025, 1568938365, 2631601807, 1319124197, 4246512663, 2729162770, 2676510124, 2392955492, 1423286782, 2642170181, 4178091964, 4202147122, 2820705835, 4291136060, 3778593596, 1625981103, 4015324543, 2294071365, 4230427827, 3012262222, 3303400942, 2978467646, 4088197064, 2155722040, 1898340365, 2343571593,  304270550,  241103259], dtype=np.uint32), 623, 0, 0.0)
    state_all_same = ('MT19937', np.array([2147483648, 2764806761, 2834399487, 1007559925, 3545027812, 2743190995, 3633051061, 3119885710, 3307397850,  511527999, 2817889371, 1099825269, 3916257701,   28723780, 3098186356, 2734203779, 3992149739, 3120179224, 2545118077, 1167399534, 1245816873,  623272116,  809102279,   77772761, 4124040055, 1521391404, 1732740905, 1886537865,   97363525,  483053560, 3328513531, 4048974125, 2500338896,   34209067, 3369906002, 2398996230, 2724810561, 3447798099,  915827240, 2417018219, 1866730044, 3044317110, 2391395239,  826758076,  947723829,  568691607,  140894779, 3454971797,  496934150, 2146897301,  728444709, 1193738716, 2482877461, 2863259323, 1879997808, 4242720409, 3988267392, 2686819879,  920232247, 2034730684, 1100290205, 2460628248, 1540927686, 3394338090,  257871878,  893091993, 3911989282,  416475177,  256474593, 3707765842, 1296475000, 3191460418, 1899795396, 2688649475, 4017009600, 3144065693, 1389299975, 1047896199, 3674347740,  637238400, 3316337587, 2755292376, 1685883314, 1812290558, 3340061309, 4258039134, 3354729227, 3225602873, 1699007740, 2442294544, 4057710773, 3993239288, 2882848092, 1095640956, 3216610087, 2534690671, 1465760645, 2259520655, 1191468938,  916658008, 2463419132, 1581922712, 3211111131, 3496967444, 1792002743, 2136480410, 2157104828, 1026557899, 1308786506, 1439541439,  370152782, 3212969465,  226154210, 1886145806, 1995348896,  807284453, 2483111657, 2563260378, 4083119393, 2919906417, 1998499878, 2068232772, 1702299033, 3203119376, 1824893133, 1065955643, 4187207053,  962672154, 1539064292,  904099137, 2437221195, 3403219490,  976570269, 4092548029, 2300587550, 1125103476, 3935696749,  514192103, 3380751404, 2946981468, 1687978580,  126206583,  218780116, 3884603121, 3962078512, 2278200360,  972451640, 1064120470,  445555430, 3877935286, 4194971636,   36004190, 2430743642,  900321835, 4142591108,  589286372,  974128024,  702866646, 2277581407,  947849220, 2614467597,  902444264, 4247305382,  488826073, 2914217627, 2734689746, 1430553594, 1591696292, 1478435687, 3360388233, 3412038769, 3397638264, 3014782969,   50341746, 1376996941, 2934160536,   68694656, 3642633596, 3197329629,  451341341, 1916702678,  315112666, 1114758415, 2964085463, 2709308228, 2462042813,  522792647, 1074175997,  916863406, 3278572249, 1496128563,  836019887, 2561617399, 1146483703, 3988238009,   68015350, 3041779173, 2336141420, 2687311891, 3277885211, 2294837296, 3455258289, 1231300554, 1538888258, 2312894483, 3935709796, 2299065558, 1838310633, 3972368605, 2945246574, 1997850842, 2619374555,  654976098,  448675884,  395213168, 1749844791, 2394796293, 2794936341, 3671767476, 2829477981, 3417239334,  392109933, 3209183702, 1740763066,  225259445, 3120586274, 2671506869, 3524002807,  187221248, 2370847874,  802390125, 3848976401, 2626693864,  365572616,  723133236, 3457406184,  547145684, 1988684282, 3916684333, 1967988534,  461744669, 2237469247, 4204600787,  505532634,  663326561, 1999240763,   18063725, 2707022626,  231461107, 3574322697,  181694522,   48674077, 1207934455, 2276538115, 2491976342, 3017235628, 2330778292, 2490863317, 4160521202, 2845835611, 1887806253,  689515339, 3563547993, 1729282921, 3568199510, 3455476660, 1157970603, 2084560324,  427296176, 3224217567, 3352219920, 2719204200, 3762872144,  972772377, 1511682772,  641636805, 4015538480, 1703052304, 2603646158,  363484881, 3988903801, 4253930511, 1720437477, 1989668460,  460354808, 2912305828, 1611841420, 4270268156, 1019830545, 1438092949,  905283195, 1969282203, 3924742342,  678344892,  182903384, 1528688230, 3814691367, 4167009949, 1034431622, 3002286088, 2945998288, 1036843966, 4161220185,  551150242, 3542736817, 2787829832, 1615245320, 2371443618,    4092886, 3103500521, 3339279991,  735031732,    3987460, 3472184567,   67856357, 4129192421, 4086019715, 3914541793, 2717079277, 3660291408, 2002353153, 3459473297, 3460617034,  699115856, 2074912004, 3293884678,  906284090, 3030796509, 1030607765, 3174447220, 1061631977, 2114390012,  599557236, 3510856625,  598273142, 1628211319, 1137465812, 2154636431,  448201593, 1822358373, 1342998884, 2313526647, 3361841311, 1136384192,  360882234, 2330839663, 1257519002,  474070202, 1210282667, 4200364142, 4130000564, 2947979213, 2965882911,  975625220, 1756400702,  841397213, 2655533664, 2512950810,  733579783,  334311062,  913742350, 3795788797, 3619671441, 4118560647, 2422181143,   82910595, 3413460011, 3023482445,  823219849, 1856075715, 3067449243, 4004528203, 3120178962, 1211140898,  837231513,  310370308,  562385597,  991110673,  989140507,  287864531, 1283906702, 1816020620, 2674050940, 2589590817,  622560067,   44506629,  774957118, 4035094649,  312466231, 1321497238, 3761623819,  110973670,  416076084, 2509757909, 2019805645,  154622156, 3145337266, 3440323837,  893672858, 1805920991, 3485686491, 1072713746, 3805429788,  203842525, 1499430199,  947463147,  643286953, 2841401895, 4083885011, 1761618562, 1015151343, 3274095581,  693636304, 2345886433, 2717922206, 1192920929, 1678440402, 3534983057, 3653194801, 4088101456,  609520508,  629108653, 1074602675, 1786183437, 1173766798, 3031411821, 2172037720, 3272040956, 1837188553, 1262750518, 1260577660, 3000942757, 2113478497, 1168086525,  845682726, 3601944650, 4133273524, 1321632980, 1741384885, 3224406603, 4030504452, 3506922757, 2139882082, 4106144581,  190238814, 4255914014,  527052404,  615240656, 1440420995, 1516620231, 1864818728, 1339129642, 3752848135, 3559457659,  697550253,  411940086, 3411464110, 2455866659,  295873292, 2651043832, 2890854790,  194107235, 2166753528, 1258017664, 3171798293, 1624720949,  230622833, 4174036785,  314891692, 3597541628,  336580337, 3318255283, 1515622894, 1181359336, 4078754930, 3823481630, 4275048024,  987373288, 2421332684,  104668742, 2760772182,  972224976, 2140588312, 2983055414, 1920297053, 1689649508, 3470185832, 2471984684, 3463384087, 2608404667, 1420877982,  476866199, 3434676208, 3362616095, 2402307694, 1154518699,  218345627,  688544360, 4002348480, 2770795485, 1055664644,  360984726, 3340487525, 1364755235, 2836873263, 3958355181,  344740450, 4121223775, 3212441969, 2001976289, 3752326585, 3641153148,  863424302, 4150788554,  712469113, 2098492911, 1951222757, 4154157513, 3128098636, 3899714571, 3869464923,  973090882,  916487438, 2991883183, 1175301829, 2723094973, 1744323878,  364176591, 3135041988, 1885649286, 3734022750, 1039757826, 2190702843, 1436821558, 1037979168, 1396699204, 3703806587, 2851810425, 4031645728, 1182690949,  895127250, 2496569340, 4140768593, 2766394520,  113930002, 1816025884, 1637662226, 1439263794, 2022112686, 4208285191,  509700831, 1042643806, 1424861589, 1759162904, 2346211062,  933455192, 3418649996, 1185457370,  193948113, 4059276168,  827795919,  673382977,  510853693, 3701205600,  809439191,  199337971, 2016894281, 1282893324, 1720181439, 4183101271, 2845550197,  363199070, 1185666979, 2972806787, 4071092665, 1704772327, 2765894532, 3312560339, 3689525991, 1077846213, 1230463999, 3348354753, 3302834915, 2915496381, 3276364209, 3384486137, 4066584269, 2866979609, 1073630262, 2915236656, 3767032662, 3869814739,  447438003, 3019518744,  702073878, 3945385170, 3863061289, 3053979290, 3954843460, 3141943357, 4197686155, 2301040037, 1253311450, 2336328634, 2958997206,  986686717, 3589509485, 4083235610, 2436109804,  333894084, 3391412906, 2800727828, 2934783685, 2442792520, 2312578153, 1967843377,  863300364,  850866037,  360313687, 3058474167, 3231066590, 3938049995,  613638093, 3413598476], dtype=np.uint32), 623, 0, 0.0)

    np.random.set_state(state_all_same)

    # Parameters
    n_arms = 20

    mean_rewards = np.random.normal(0, sigma2, n_arms)
    num_iterations = int(1e3)

    # Run simulations
    comunication_algorithms: Dict[str, function] = {
        "QuBan" : quban_quantize,
        "QuOne" : quone_quantize,
        "QuOne2" : quone2_quantize,
        "Regular" : dont_qunatize
    }

    MAB_algorithms: Dict[str, MAB] = {
        "Epsilon-Greedy": EpsilonGreedy(n_arms, None, min(x for x in (max(mean_rewards) - mean_rewards) if x > 0)),
        "UCB": UCB(n_arms, num_iterations),
        "Thompson Sampling": ThompsonSampling(n_arms)
    }

    results: Dict[str, np.ndarray] = {}

    for comunication_name, comunication_algorithm in comunication_algorithms.items():
        for MAB_name, MAB_algorithm in MAB_algorithms.items():
            MAB_algorithm.reset()
            quant_rewards, quant_bits, rewards_mistake = simulate(comunication_algorithm, MAB_algorithm, n_arms, mean_rewards, num_iterations)
            results[f"{comunication_name} - {MAB_name}"] = {
                "rewards_mistake" : rewards_mistake,
                "quant_rewards": quant_rewards,
                "quant_bits": quant_bits
            }

    # Plot results
    plt.figure(figsize=(12/2, 8/2))
    for name, data in results.items():
        plt.plot(data["rewards_mistake"], label=f"{name}", linestyle='--')

    plt.xlabel("Iterations")
    plt.ylabel("rewards_mistake")
    plt.title("rewards_mistake of the comunication")
    plt.legend()
    plt.show()


    print(max(mean_rewards))
    plt.figure(figsize=(12/2, 8/2))
    for name, data in results.items():
        plt.plot(np.cumsum(data["quant_rewards"])/np.arange(1, len(data["quant_rewards"]) + 1), label=f"{name}", linestyle='--')
    plt.plot(np.full(num_iterations, max(mean_rewards)))

    plt.xlabel("Iterations")
    plt.ylabel("Average Reward")
    plt.title("Performance Comparison of MAB Algorithms in Each Comunication Setup")
    plt.legend()
    plt.show()



    plt.figure(figsize=(12/2, 8/2))
    for name, data in results.items():
        plt.plot(np.cumsum(max(mean_rewards) - data["quant_rewards"])/np.arange(1, len(data["quant_rewards"]) + 1), label=f"{name}", linestyle='--')
    plt.plot(np.full(num_iterations, 0))

    plt.xlabel("Iterations")
    plt.ylabel("Average Regret")
    plt.title("Performance Comparison of MAB Algorithms in Each Comunication Setup")
    plt.legend()
    plt.show()


    # Plot communication cost
    plt.figure(figsize=(12/2, 8/2))
    for name, data in results.items():
        # plt.plot(np.cumsum(data["bits"])/np.arange(1, len(data["bits"]) + 1), label=f"{name} (Full Precision)")
        plt.plot(np.cumsum(data["quant_bits"])/np.arange(1, len(data["quant_bits"]) + 1), label=f"{name}", linestyle='--')

    plt.xlabel("Iterations")
    plt.ylabel("Cumulative Bits Used")
    plt.title("Communication Cost Comparison of MAB Algorithms in Each Comunication Setup")
    plt.legend()
    plt.show()



if __name__ == "__main__":
    main()
